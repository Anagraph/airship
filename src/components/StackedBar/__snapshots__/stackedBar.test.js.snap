// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<StackedBar /> render when data passed in does not render the legend when showLegend is false 1`] = `
.c0 .tick line {
  stroke: #747474;
  opacity: 0.1;
}

.c0 .tick text {
  fill: #747474;
}

.c0 .tick:first-child line {
  opacity: 0.5;
}

<svg
  className="c0"
  viewBox="0 0 248 160"
/>
`;

exports[`<StackedBar /> render when data passed in renders the correct amount of bars 1`] = `
.c0 .tick line {
  stroke: #747474;
  opacity: 0.1;
}

.c0 .tick text {
  fill: #747474;
}

.c0 .tick:first-child line {
  opacity: 0.5;
}

<svg
  className="c0"
  viewBox="0 0 248 160"
/>
`;

exports[`<StackedBar /> render when data passed in renders the legend 1`] = `
Array [
  .c0 .tick line {
  stroke: #747474;
  opacity: 0.1;
}

.c0 .tick text {
  fill: #747474;
}

.c0 .tick:first-child line {
  opacity: 0.5;
}

<svg
    className="c0"
    viewBox="0 0 248 160"
  />,
  .c2 {
  display: inline-block;
  width: 12px;
  min-width: 12px;
  max-width: 12px;
  height: 12px;
  min-height: 12px;
  max-height: 12px;
  margin-right: 8px;
  background: #56C58C;
}

.c4 {
  display: inline-block;
  width: 12px;
  min-width: 12px;
  max-width: 12px;
  height: 12px;
  min-height: 12px;
  max-height: 12px;
  margin-right: 8px;
  background: #F0CD53;
}

.c5 {
  display: inline-block;
  width: 12px;
  min-width: 12px;
  max-width: 12px;
  height: 12px;
  min-height: 12px;
  max-height: 12px;
  margin-right: 8px;
  background: #3AB5F0;
}

.c0 {
  padding: 0;
  margin: 8px 0 0 16px;
}

.c1 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1:not(:last-child) {
  margin-right: 1rem;
}

.c3 {
  color: #2C2C2C;
  margin: 0;
  font-family: Roboto,sans-serif;
  font-weight: 400;
  -webkit-font-smoothing: antialiased;
  font-size: 12px;
  line-height: 20px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: left;
  width: 100%;
  cursor: default;
}

<ul
    className="c0"
  >
    <li
      className="c1"
    >
      <div
        className="c2"
      />
      <p
        className="c3"
      >
        Private rooms
      </p>
    </li>
    <li
      className="c1"
    >
      <div
        className="c4"
      />
      <p
        className="c3"
      >
        Shared rooms
      </p>
    </li>
    <li
      className="c1"
    >
      <div
        className="c5"
      />
      <p
        className="c3"
      >
        Entire home/apt
      </p>
    </li>
  </ul>,
]
`;

exports[`<StackedBar /> update when data changes should call the update method or the chart 1`] = `
.c0 .tick line {
  stroke: #747474;
  opacity: 0.1;
}

.c0 .tick text {
  fill: #747474;
}

.c0 .tick:first-child line {
  opacity: 0.5;
}

<svg
  className="c0"
  viewBox="0 0 248 160"
/>
`;

exports[`<StackedBar /> update when data changes should call the update method or the chart 2`] = `
.c0 .tick line {
  stroke: #747474;
  opacity: 0.1;
}

.c0 .tick text {
  fill: #747474;
}

.c0 .tick:first-child line {
  opacity: 0.5;
}

<svg
  className="c0"
  viewBox="0 0 248 160"
/>
`;
